group 'com.mojitox.mxflutter'
version '1.0'

buildscript {
    apply from: file("config.gradle")
    ext.kotlin_version = '1.3.50'
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

rootProject.allprojects {
    repositories {
        google()
        jcenter()
    }
}

apply plugin: 'com.android.library'
apply plugin: "kotlin-android"

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 17
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "boolean", "USE_V8", "$USE_V8"
        buildConfigField "boolean", "DELAY_JS_ENGINE_INIT", "$DELAY_JS_ENGINE_INIT"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    /** 编译mxflutter so时反注释掉此处,编译完恢复 **/
//    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"
//        }
//
//    }

    lintOptions {
        disable 'InvalidPackage'
    }

    //java版本8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //如果so动态下发/使用x5，这里就不要打进安装包
    if (!USE_V8 || USE_V8_SO_DOWNLOAD) {
        packagingOptions {
            exclude 'lib/armeabi-v7a/libj2v8.so'
            exclude 'lib/arm64-v8a/libj2v8.so'
            exclude 'lib/x86/libj2v8.so'
            exclude 'lib/x86_64/libj2v8.so'
        }
    }

    buildTypes {
        release {
            consumerProguardFiles 'proguard-rules.pro'
            externalNativeBuild {
                cmake {
                    cppFlags "-DTENCENT_SHELL=1", "-DNOLOG=1"
                }
            }
            buildConfigField "boolean", "IS_RELEASE", "true"
        }
        debug {
            externalNativeBuild {
                cmake {
                    cppFlags "-DTENCENT_SHELL=0"
                }
            }
            buildConfigField "boolean", "IS_RELEASE", "false"
        }
    }

    sourceSets {
        main {
            java {
                srcDirs = [
                        'src/main/java',
                        'src/main/v8',
                ]
            }
        }
        if (USE_V8) {
            test.java.srcDirs 'src/test/java', 'src/testV8/java'
        } else {
            test.java.srcDirs 'src/test/java', 'src/testX5/java'
        }
    }

    testOptions {
        // android gradle plugin > 3.0之后再打开，现在2.3打开报错
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            systemProperty 'robolectric.dependency.repo.url', 'https://mirrors.tencent.com/nexus/repository/maven-public/'
            systemProperty 'robolectric.dependency.repo.id', 'local'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.annotation:annotation:1.1.0"
    if (!IS_RELEASE) {
        implementation "com.facebook.stetho:stetho:1.5.1"
    } else {
        compileOnly "com.facebook.stetho:stetho:1.5.1"
    }

    //test
    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:2.8.9"
    testImplementation "org.mockito:mockito-android:2.8.9"
    testImplementation "org.powermock:powermock-module-junit4:1.7.1"
    testImplementation "org.powermock:powermock-api-mockito2:1.7.1"
    testImplementation 'org.powermock:powermock-core:1.7.1'
    testImplementation "org.powermock:powermock-module-junit4-rule:1.7.1"
    testImplementation "org.powermock:powermock-classloading-xstream:1.7.1"
    testImplementation "org.robolectric:robolectric:4.3"
}

